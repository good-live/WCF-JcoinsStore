// Generated by CoffeeScript 1.8.0

/*
 * @author	Joshua Ruesweg
 * @copyright	2015-2016 wcflabs.de
 * @license	WCFLabs.de-Lizenz <https://wcflabs.de/license/license.txt>
 * @package	de.wcflabs.goodlive.steamGame.jcoins
 */

(function() {
  (function($, window) {
    "use strict";
    var TransferToSteamOverlay, console, _base, _base1, _base2, _base3, _base4;
    console = {
      log: function(message) {
        if (typeof production === "undefined" || production === null) {
          return window.console.log("[de.wcflabs.goodlive.steamGame.jcoins] " + message);
        }
      },
      warn: function(message) {
        if (typeof production === "undefined" || production === null) {
          return window.console.warn("[de.wcflabs.goodlive.steamGame.jcoins] " + message);
        }
      },
      error: function(message) {
        if (typeof production === "undefined" || production === null) {
          return window.console.error("[de.wcflabs.goodlive.steamGame.jcoins] " + message);
        }
      }
    };
    TransferToSteamOverlay = Class.extend({
      _dialog: null,
      _didInit: false,
      _proxy: null,
      _notification: null,
      init: function() {
        return WCF.System.Event.addListener('de.wcflabs.wcf.jcoins.Panel', 'initedDropdown', $.proxy(this._initButton, this));
      },
      _initButton: function() {
        var $var;
        $var = WCF.Language.get("wcf.jcoins.steamTransfer.title");
        $("<li id=\"steamTransferButton\"><span title=\"" + $var + "\" class=\"jsTooltip\"><span class=\"icon fa fa-cloud-upload pointer\"></span></span></li>").appendTo('.interactiveDropdown[data-source=jcoinsPanel] ul.interactiveDropdownLinks');
        return $('#steamTransferButton').click(this._click.bind(this));
      },
      _click: function(event) {
        if (!this._didInit) {
          this._dialog = $("<div />").hide().appendTo(document.body);
          this._proxy = new WCF.Action.Proxy({
            autoSend: true,
            data: {
              actionName: "getTransferToSteamOverlay",
              className: "wcf\\data\\jcoins\\statement\\SteamJCoinsStatementAction"
            },
            success: $.proxy(this._success, this),
            failure: $.proxy(this._failure, this)
          });
          return this._didInit = true;
        } else {
          return this._dialog.wcfDialog('open');
        }
      },
      _submit: function() {
        var $amount;
        this._dialog.find(".formSubmit > button[data-type=submit]").disable();
        $amount = this._dialog.find('#amountInput').val();
        if ($amount < 1) {
          this._throwDialogError("amount", WCF.Language.get("wcf.global.form.error.empty"));
          return;
        }
        this._proxy.setOption('data', {
          actionName: 'transferToSteam',
          className: "wcf\\data\\jcoins\\statement\\SteamJCoinsStatementAction",
          parameters: {
            amount: $amount
          }
        });
        return this._proxy.sendRequest();
      },
      _throwDialogError: function(field, message) {
        var fieldCapitalize;
        $('.innerError').remove();
        $('.formError').removeClass('formError');
        fieldCapitalize = field.charAt(0).toUpperCase() + field.slice(1);
        this._dialog.find("#transferToSteamOverlay" + fieldCapitalize + "Dl").addClass("formError");
        if (this._dialog.find("#transferToSteamOverlay" + fieldCapitalize + "Dl > dd > .innerError").length) {
          this._dialog.find("#transferToSteamOverlay" + fieldCapitalize + "Dl > dd > .innerError").remove();
        }
        this._dialog.find("#" + field + "Input").after($("<small class=\"innerError\">" + message + "</small>"));
        return this._dialog.find('.formSubmit > button[data-type=submit]').enable();
      },
      _success: function(data, textStatus, jqXHR) {
        if (data.actionName === "getTransferToSteamOverlay") {
          this._dialog.html(data.returnValues.template);
          this._dialog.find(".formSubmit > button[data-type=submit]").click(this._submit.bind(this));
          return this._dialog.wcfDialog({
            title: WCF.Language.get("wcf.jcoins.steamTransfer.title")
          });
        } else {
          if (this._notification == null) {
            this._notification = new WCF.System.Notification(WCF.Language.get("wcf.jcoins.steamTransfer.success"));
          }
          this._dialog.wcfDialog("close");
          this._notification.show();
          this._dialog.find(".formSubmit > button[data-type=submit]").enable();
          this._dialog.find('#amountInput').val("");
          this._dialog.find(".formError").removeClass("formError");
          return this._dialog.find(".innerError").remove();
        }
      },
      _failure: function(data, textStatus, jqXHR) {
        var _ref, _ref1, _ref2;
        console.log("request failed");
        this._dialog.find(".formSubmit > button[data-type=submit]").enable();
        if (!(((data != null ? (_ref = data.returnValues) != null ? _ref.errorType : void 0 : void 0) != null) || ((data != null ? data.message : void 0) != null))) {
          return true;
        }
        this._dialog.find(".formSubmit > button[data-type=submit]").enable();
        this._throwDialogError(data != null ? (_ref1 = data.returnValues) != null ? _ref1.fieldName : void 0 : void 0, data != null ? (_ref2 = data.returnValues) != null ? _ref2.errorType : void 0 : void 0);
        return false;
      }
    });
    if (window.de == null) {
      window.de = {};
    }
    if ((_base = window.de).wcflabs == null) {
      _base.wcflabs = {};
    }
    if ((_base1 = window.de.wcflabs).goodlive == null) {
      _base1.goodlive = {};
    }
    if ((_base2 = window.de.wcflabs.goodlive).steamGame == null) {
      _base2.steamGame = {};
    }
    if ((_base3 = window.de.wcflabs.goodlive.steamGame).jcoins == null) {
      _base3.jcoins = {};
    }
    return (_base4 = window.de.wcflabs.goodlive.steamGame.jcoins).TransferToSteamOverlay != null ? _base4.TransferToSteamOverlay : _base4.TransferToSteamOverlay = TransferToSteamOverlay;
  })(jQuery, this);

}).call(this);